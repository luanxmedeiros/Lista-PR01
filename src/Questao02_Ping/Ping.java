/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Questao02_Ping;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.text.ParseException;
import java.util.Properties;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.MaskFormatter;


/**
 *
 * @author Luan Medeiros
 */
public class Ping extends javax.swing.JFrame {
    private String ipHost = "";
    int timeOut = 3000;
    int port = 8080;
    
public String convertUTF8toISO(String str) {  
Charset utf8charset = Charset.forName("UTF-8");
        Charset iso88591charset = Charset.forName("ISO-8859-1");

        ByteBuffer inputBuffer = ByteBuffer.wrap(str.getBytes());

        // decode UTF-8
        CharBuffer data = utf8charset.decode(inputBuffer);

        // encode ISO-8559-1
        ByteBuffer outputBuffer = iso88591charset.encode(data);
        byte[] outputData = outputBuffer.array();

        return new String(outputData);
}  
    
    public void realizaPing(String host)
    {
      Properties properties = System.getProperties();                
      String so = String.valueOf( System.getProperty("os.name") );                
      //String texto = so;
      String windows = "windows";
      String linux = "linux";
      if(so.toLowerCase().contains(windows.toLowerCase()) == true)
      {
            resultadoDetalhado.setText("");
            
        String ip = host;
        String pingResult = "";

        String pingCmd = "ping " + ip;
        try {
/*            if (InetAddress.getByName(host).isReachable(3000))             
               resultado.setText("PING OK: O HOST " + host+" RESPONDEU");
            else
               resultado.setText("PING FALHOU: O HOST " + host+" NÃO RESPONDEU"); */
            Runtime r = Runtime.getRuntime(); 
            Process p = r.exec(pingCmd);
            
            

            BufferedReader in = new BufferedReader(new
            InputStreamReader(p.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                resultadoDetalhado.append("\n"+inputLine+"\n");
            }
            in.close();

        } catch (IOException e) {
            System.out.println(e);
        }

         if(resultadoDetalhado.getText().toLowerCase().contains("resposta".toLowerCase()) == true)
             resultado.setText("PING OK: O HOST " + host+" RESPONDEU");
         else if(resultadoDetalhado.getText().toLowerCase().contains("esgotado".toLowerCase()) == true)
             resultado.setText("PING FALHOU: O HOST " + host+" NÃO RESPONDEU");
      }
      else if(so.toLowerCase().contains(linux.toLowerCase()) == true)
      {
        resultadoDetalhado.setText("");
            
        String ip = host;
        String pingResult = "";

        String pingCmd = "ping " + ip;
        try {

            Runtime r = Runtime.getRuntime();
            Process p = r.exec(pingCmd);

            BufferedReader in = new BufferedReader(new
            InputStreamReader(p.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                resultadoDetalhado.append("\n"+inputLine+"\n");
            }
            in.close();

        } catch (IOException e) {
            System.out.println(e);
        }
        
         if(resultadoDetalhado.getText().toLowerCase().contains("resposta".toLowerCase()) == true)
             resultado.setText("PING OK: O HOST " + host+" RESPONDEU");
         else if(resultadoDetalhado.getText().toLowerCase().contains("esgotado".toLowerCase()) == true)
             resultado.setText("PING FALHOU: O HOST " + host+" NÃO RESPONDEU");
      }
      
    }
    /** Creates new form Cliente */      
    public Ping() throws ParseException {
        MaskFormatter maskData = new MaskFormatter("###");        
      /*  maskData.install(campoIPA);
        maskData.install(campoIPB);
        maskData.install(campoIPC);
        maskData.install(campoIPD);*/
        
        initComponents();
        resultadoDetalhado.setLineWrap(true);
        resultadoDetalhado.setWrapStyleWord(true);
    }

    public boolean isInteger(String str) {
        return java.util.regex.Pattern.matches("\\d+", str);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        campoIPB = new javax.swing.JFormattedTextField();
        campoIPC = new javax.swing.JFormattedTextField();
        campoIPD = new javax.swing.JFormattedTextField();
        campoIPA = new javax.swing.JFormattedTextField();
        nomeIP = new javax.swing.JLabel();
        conectar = new javax.swing.JButton();
        resultado = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultadoDetalhado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ping");
        setPreferredSize(new java.awt.Dimension(900, 410));
        setResizable(false);

        painel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        painel.setPreferredSize(new java.awt.Dimension(900, 400));

        campoIPB.setBorder(null);
        campoIPB.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        campoIPB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoIPB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoIPB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIPBActionPerformed(evt);
            }
        });
        campoIPB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoIPBKeyReleased(evt);
            }
        });

        campoIPC.setBorder(null);
        campoIPC.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        campoIPC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoIPC.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoIPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIPCActionPerformed(evt);
            }
        });
        campoIPC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoIPCKeyReleased(evt);
            }
        });

        campoIPD.setBorder(null);
        campoIPD.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        campoIPD.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoIPD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoIPD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIPDActionPerformed(evt);
            }
        });
        campoIPD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoIPDKeyReleased(evt);
            }
        });

        campoIPA.setBorder(null);
        campoIPA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        campoIPA.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoIPA.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoIPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIPAActionPerformed(evt);
            }
        });
        campoIPA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoIPAKeyReleased(evt);
            }
        });

        nomeIP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nomeIP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nomeIP.setText("DIGITE O IP DO HOST");

        conectar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        conectar.setText("PING");
        conectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conectarActionPerformed(evt);
            }
        });

        resultado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        resultado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        resultadoDetalhado.setEditable(false);
        resultadoDetalhado.setBackground(new java.awt.Color(0, 0, 0));
        resultadoDetalhado.setColumns(20);
        resultadoDetalhado.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        resultadoDetalhado.setForeground(new java.awt.Color(0, 255, 0));
        resultadoDetalhado.setRows(5);
        resultadoDetalhado.setWrapStyleWord(true);
        jScrollPane1.setViewportView(resultadoDetalhado);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 252, Short.MAX_VALUE)
                        .addComponent(nomeIP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoIPA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoIPB, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoIPC, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoIPD, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conectar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(resultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {campoIPA, campoIPB, campoIPC, campoIPD});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoIPA)
                    .addComponent(campoIPB)
                    .addComponent(campoIPC)
                    .addComponent(campoIPD)
                    .addComponent(nomeIP)
                    .addComponent(conectar))
                .addGap(52, 52, 52)
                .addComponent(resultado, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(painel, javax.swing.GroupLayout.PREFERRED_SIZE, 895, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void conectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conectarActionPerformed
/*
      Properties properties = System.getProperties();
        System.out.println("propriedades: " + properties.toString());
        System.out.println(System.getProperty("os.name"));
        String so = String.valueOf( System.getProperty("os.name") );
        System.out.println("O sistema operacional é: " + so);
        
                String texto = so;
		String procurarPor = "windows";
		System.out.println(texto.toLowerCase().contains(procurarPor.toLowerCase())); */
        
        /*if (so.equals("Linux")){
            Runtime.getRuntime().exec("cp /home/usuario_1/arquivo.txt /home/usuario_2");
        }
        if (so.equals("Windows 7")){
            Runtime.getRuntime().exec("copy C:\Users\Usuario_1\arquivo.txt C:\Users\Usuario_2");
        }*/


        resultado.setText("");
        if(!campoIPA.getText().equals("") && !campoIPB.getText().equals("") && !campoIPC.getText().equals("") && !campoIPD.getText().equals(""))
        {
            String campoIPString = campoIPA.getText()+"."+campoIPB.getText()+"."+campoIPC.getText()+"."+campoIPD.getText();
            ipHost = campoIPString.replace(" ", "");
            
            realizaPing(ipHost);
 
            campoIPA.setBorder(null);
            campoIPB.setBorder(null);
            campoIPC.setBorder(null);
            campoIPD.setBorder(null);            
            
           // System.out.println("IP: "+campoIPString);
            
        }
        else
        {
            if(campoIPA.getText().equals("")) campoIPA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            if(campoIPB.getText().equals("")) campoIPB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            if(campoIPC.getText().equals("")) campoIPC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            if(campoIPD.getText().equals("")) campoIPD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        }
    }//GEN-LAST:event_conectarActionPerformed

    private void campoIPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIPAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIPAActionPerformed

    private void campoIPBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIPBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIPBActionPerformed

    private void campoIPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIPCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIPCActionPerformed

    private void campoIPDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIPDActionPerformed
        
    }//GEN-LAST:event_campoIPDActionPerformed

    private void campoIPAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIPAKeyReleased
        //System.out.println(evt.getKeyCode());
        campoIPA.setText(campoIPA.getText().replaceAll("[^0-9]", ""));
        if(isInteger(campoIPA.getText()) == false){
            if(!campoIPA.getText().replace(" ", "").equals(""))campoIPA.setText(campoIPA.getText().substring(0, campoIPA.getText().length() - 1));
        }
            else if(!campoIPA.getText().replace(" ", "").equals(""))
        {
            if(campoIPA.getText().length() > 1 && campoIPA.getText().substring(0, 1).equals("0")) campoIPA.setText(campoIPA.getText().substring(0, 1));
            else if(Integer.parseInt(campoIPA.getText().replace(" ", "")) > 254) campoIPA.setText(campoIPA.getText().substring(0, 2));
        }               
        if(campoIPA.getText().replace(" ", "").length()==3) campoIPB.requestFocus(rootPaneCheckingEnabled);
        if(evt.getKeyCode() == 46 || evt.getKeyCode() == 0 && !campoIPA.getText().replace(" ", "").equals("")) campoIPB.requestFocus(rootPaneCheckingEnabled);
    }//GEN-LAST:event_campoIPAKeyReleased

    private void campoIPCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIPCKeyReleased
        campoIPC.setText(campoIPC.getText().replaceAll("[^0-9]", ""));
        if(isInteger(campoIPC.getText()) == false){
            if(!campoIPC.getText().replace(" ", "").equals(""))campoIPC.setText(campoIPC.getText().substring(0, campoIPC.getText().length() - 1));
        }
            else if(!campoIPC.getText().replace(" ", "").equals(""))
        {
            if(campoIPC.getText().length() > 1 && campoIPC.getText().substring(0, 1).equals("0")) campoIPC.setText(campoIPC.getText().substring(0, 1));
            else if(Integer.parseInt(campoIPC.getText().replace(" ", "")) > 254) campoIPC.setText(campoIPC.getText().substring(0, 2));
        }                
        if(evt.getKeyCode() == 46 || evt.getKeyCode() == 0 && !campoIPC.getText().replace(" ", "").equals("")) campoIPD.requestFocus(rootPaneCheckingEnabled);
        if(evt.getKeyCode() == 8 && campoIPC.getText().replace(" ", "").equals("")) campoIPB.requestFocus(rootPaneCheckingEnabled);
        if(campoIPC.getText().replace(" ", "").length()==3) campoIPD.requestFocus(rootPaneCheckingEnabled);
    }//GEN-LAST:event_campoIPCKeyReleased

    private void campoIPDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIPDKeyReleased
        campoIPD.setText(campoIPD.getText().replaceAll("[^0-9]", ""));
        if(isInteger(campoIPD.getText()) == false){
            if(!campoIPD.getText().replace(" ", "").equals(""))campoIPD.setText(campoIPD.getText().substring(0, campoIPD.getText().length() - 1));
        }
            else if(!campoIPD.getText().replace(" ", "").equals(""))
        {
            if(campoIPD.getText().length() > 1 && campoIPD.getText().substring(0, 1).equals("0")) campoIPD.setText(campoIPD.getText().substring(0, 1));
            else if(Integer.parseInt(campoIPD.getText().replace(" ", "")) > 254) campoIPD.setText(campoIPD.getText().substring(0, 2));
        }       
        if(evt.getKeyCode() == 8 && campoIPD.getText().replace(" ", "").equals("")) campoIPC.requestFocus(rootPaneCheckingEnabled);
    }//GEN-LAST:event_campoIPDKeyReleased

    private void campoIPBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIPBKeyReleased
        campoIPB.setText(campoIPB.getText().replaceAll("[^0-9]", ""));
        if(isInteger(campoIPB.getText()) == false){
            if(!campoIPB.getText().replace(" ", "").equals(""))campoIPB.setText(campoIPB.getText().substring(0, campoIPB.getText().length() - 1));
        }   
            else if(!campoIPB.getText().replace(" ", "").equals(""))
        {
            if(campoIPB.getText().length() > 1 && campoIPB.getText().substring(0, 1).equals("0")) campoIPB.setText(campoIPB.getText().substring(0, 1));
            else if(Integer.parseInt(campoIPB.getText().replace(" ", "")) > 254) campoIPB.setText(campoIPB.getText().substring(0, 2));
        } 
        if(evt.getKeyCode() == 46 || evt.getKeyCode() == 0 && !campoIPB.getText().replace(" ", "").equals("")) campoIPC.requestFocus(rootPaneCheckingEnabled);
        if(evt.getKeyCode() == 8 && campoIPB.getText().replace(" ", "").equals("")) campoIPA.requestFocus(rootPaneCheckingEnabled);
        if(campoIPB.getText().replace(" ", "").length()==3) campoIPC.requestFocus(rootPaneCheckingEnabled);      
    }//GEN-LAST:event_campoIPBKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Ping().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(Ping.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField campoIPA;
    private javax.swing.JFormattedTextField campoIPB;
    private javax.swing.JFormattedTextField campoIPC;
    private javax.swing.JFormattedTextField campoIPD;
    private javax.swing.JButton conectar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nomeIP;
    private javax.swing.JPanel painel;
    private javax.swing.JLabel resultado;
    private javax.swing.JTextArea resultadoDetalhado;
    // End of variables declaration//GEN-END:variables
}
