/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Questao01_Eco;



import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Luan Medeiros
 */
public class Cliente extends javax.swing.JFrame {
    private String ipServidor = "";
    String campoIPString;
    Socket clienteSocket;
    BufferedWriter output;
    /** Creates new form Cliente */
    public Cliente() throws ParseException {
               
        initComponents();
    }

    public boolean isInteger(String str) {
        return java.util.regex.Pattern.matches("\\d+", str);
    }
    
    public String retornaMensagem()
    {
        String mensagem = "";
        try {            
            DataOutputStream out = new DataOutputStream(clienteSocket.getOutputStream());
            out.writeUTF("Cliente mandando mensagem");
            DataInputStream in = new DataInputStream(clienteSocket.getInputStream());
            mensagem = in.readUTF();
            System.out.println(mensagem);//cliente recebendo retorno do servidor
            out.close();
            in.close();
            clienteSocket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mensagem;
    }

    public void conecta(String endereco, int porta) {
		try {
			System.out.printf("Conectando ao servidor %s na porta %d \n",
					endereco, porta);
			clienteSocket = new Socket(endereco, porta);
		} catch (IOException ex) {
                    try {
                        clienteSocket = new Socket("127.0.0.1", 3005);
                    } catch (IOException e) {
                        informacao.setText("SERVIDOR NÃƒO ENCONTRADOR");
                        Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, e);
                    }                        
		}
                //Criando o buffer de armazenamento
		try {
			output = new BufferedWriter(new OutputStreamWriter(
					this.clienteSocket.getOutputStream()));
		} catch (Exception e) {
			System.out
					.println("## ERRO: Ao acessar streams de entrada e saida do cliente ##");
			e.printStackTrace();
		}
	}
	public void desconecta() {
		try {
			output.close();
			clienteSocket.close();
		} catch (IOException e) {
			System.out.println("## ERRO: Ao desconectar do servidor ##");
			e.printStackTrace();
		}
	}
	public void enviaMensagem(String mensagem) {
		try {
			System.out.println("=> Enviando mensagem: " + mensagem);
			output.write(mensagem) ;
			output.flush();
		} catch (IOException e) {
			System.out.println("## ERRO: Ao enviar mensagem");
			e.printStackTrace();
		}
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        campoIPB = new javax.swing.JFormattedTextField();
        campoIPC = new javax.swing.JFormattedTextField();
        campoIPD = new javax.swing.JFormattedTextField();
        campoIPA = new javax.swing.JFormattedTextField();
        conectar = new javax.swing.JButton();
        informacao = new javax.swing.JLabel();
        scrooll = new javax.swing.JScrollPane();
        resposta = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        mensagem = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        nomeIP = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eco");
        setResizable(false);
        getContentPane().setLayout(new java.awt.FlowLayout());

        painel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        campoIPB.setBorder(null);
        campoIPB.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        campoIPB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoIPB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoIPB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIPBActionPerformed(evt);
            }
        });
        campoIPB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoIPBKeyReleased(evt);
            }
        });

        campoIPC.setBorder(null);
        campoIPC.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        campoIPC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoIPC.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoIPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIPCActionPerformed(evt);
            }
        });
        campoIPC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoIPCKeyReleased(evt);
            }
        });

        campoIPD.setBorder(null);
        campoIPD.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        campoIPD.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoIPD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoIPD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIPDActionPerformed(evt);
            }
        });
        campoIPD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoIPDKeyReleased(evt);
            }
        });

        campoIPA.setBorder(null);
        campoIPA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        campoIPA.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoIPA.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoIPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIPAActionPerformed(evt);
            }
        });
        campoIPA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoIPAKeyReleased(evt);
            }
        });

        conectar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        conectar.setText("CONECTAR");
        conectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(campoIPA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoIPB, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoIPC, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoIPD, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conectar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {campoIPA, campoIPB, campoIPC, campoIPD});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoIPA)
                    .addComponent(campoIPB)
                    .addComponent(campoIPC)
                    .addComponent(campoIPD)
                    .addComponent(conectar))
                .addContainerGap())
        );

        informacao.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        informacao.setForeground(new java.awt.Color(255, 0, 0));
        informacao.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        resposta.setEditable(false);
        resposta.setColumns(20);
        resposta.setRows(5);
        scrooll.setViewportView(resposta);

        jLabel2.setText("RESPOSTA DO SERVIDOR");

        mensagem.setEditable(false);
        mensagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mensagemActionPerformed(evt);
            }
        });
        mensagem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mensagemKeyReleased(evt);
            }
        });

        jLabel1.setText("DIGITE A MENSAGEM E PRESSIONE ENTER");

        nomeIP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nomeIP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nomeIP.setText("DIGITE O IP DO SERVIDOR");

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelLayout.createSequentialGroup()
                        .addComponent(nomeIP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(scrooll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                        .addComponent(mensagem, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(informacao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(nomeIP))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informacao, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrooll, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 42, Short.MAX_VALUE))
        );

        getContentPane().add(painel);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void conectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conectarActionPerformed
                
        if(!campoIPA.getText().equals("") && !campoIPB.getText().equals("") && !campoIPC.getText().equals("") && !campoIPD.getText().equals(""))
        {
            campoIPString = campoIPA.getText()+"."+campoIPB.getText()+"."+campoIPC.getText()+"."+campoIPD.getText();
            campoIPString = campoIPString.replace(" ", "");
            campoIPA.setBorder(null);
            campoIPB.setBorder(null);
            campoIPC.setBorder(null);
            campoIPD.setBorder(null);            

            conecta(campoIPString, 3005);
            if(!clienteSocket.isClosed()) 
            {
                conectar.setEnabled(false);
                mensagem.setEditable(true); 
                informacao.setText("");
            }            
        }
        else
        {
            if(campoIPA.getText().equals("")) campoIPA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            if(campoIPB.getText().equals("")) campoIPB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            if(campoIPC.getText().equals("")) campoIPC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            if(campoIPD.getText().equals("")) campoIPD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        }
    }//GEN-LAST:event_conectarActionPerformed

    private void campoIPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIPAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIPAActionPerformed

    private void campoIPBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIPBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIPBActionPerformed

    private void campoIPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIPCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIPCActionPerformed

    private void campoIPDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIPDActionPerformed
        
    }//GEN-LAST:event_campoIPDActionPerformed

    private void campoIPAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIPAKeyReleased
       // System.out.println(evt.getKeyCode());
       campoIPA.setText(campoIPA.getText().replaceAll("[^0-9]", "")); 
       if(isInteger(campoIPA.getText()) == false){
            if(!campoIPA.getText().replace(" ", "").equals(""))campoIPA.setText(campoIPA.getText().substring(0, campoIPA.getText().length() - 1));
        }
            else if(!campoIPA.getText().replace(" ", "").equals(""))
        {
           if(campoIPA.getText().length() > 1 && campoIPA.getText().substring(0, 1).equals("0")) campoIPA.setText(campoIPA.getText().substring(0, 1));
            else if(Integer.parseInt(campoIPA.getText().replace(" ", "")) > 254) campoIPA.setText(campoIPA.getText().substring(0, 2));
        }       
        if(evt.getKeyCode() == 46 || evt.getKeyCode() == 0 && !campoIPA.getText().replace(" ", "").equals("")) campoIPB.requestFocus(rootPaneCheckingEnabled);
        if(campoIPA.getText().replace(" ", "").length()==3) campoIPB.requestFocus(rootPaneCheckingEnabled);
    }//GEN-LAST:event_campoIPAKeyReleased

    private void campoIPCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIPCKeyReleased
        campoIPC.setText(campoIPC.getText().replaceAll("[^0-9]", ""));
        if(isInteger(campoIPC.getText()) == false){
            if(!campoIPC.getText().replace(" ", "").equals(""))campoIPC.setText(campoIPC.getText().substring(0, campoIPC.getText().length() - 1));
        }
            else if(!campoIPC.getText().replace(" ", "").equals(""))
        {
            if(campoIPC.getText().length() > 1 && campoIPC.getText().substring(0, 1).equals("0")) campoIPC.setText(campoIPC.getText().substring(0, 1));
            else if(Integer.parseInt(campoIPC.getText().replace(" ", "")) > 254) campoIPC.setText(campoIPC.getText().substring(0, 2));
        }                
        if(evt.getKeyCode() == 46 || evt.getKeyCode() == 0 && !campoIPC.getText().replace(" ", "").equals("")) campoIPD.requestFocus(rootPaneCheckingEnabled);
        if(evt.getKeyCode() == 8 && campoIPC.getText().replace(" ", "").equals("")) campoIPB.requestFocus(rootPaneCheckingEnabled);
        if(campoIPC.getText().replace(" ", "").length()==3) campoIPD.requestFocus(rootPaneCheckingEnabled);
    }//GEN-LAST:event_campoIPCKeyReleased

    private void campoIPDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIPDKeyReleased
        campoIPD.setText(campoIPD.getText().replaceAll("[^0-9]", ""));
        if(isInteger(campoIPD.getText()) == false){
            if(!campoIPD.getText().replace(" ", "").equals(""))campoIPD.setText(campoIPD.getText().substring(0, campoIPD.getText().length() - 1));
        }
            else if(!campoIPD.getText().replace(" ", "").equals(""))
        {
            if(campoIPD.getText().length() > 1 && campoIPD.getText().substring(0, 1).equals("0")) campoIPD.setText(campoIPD.getText().substring(0, 1));
            else if(Integer.parseInt(campoIPD.getText().replace(" ", "")) > 254) campoIPD.setText(campoIPD.getText().substring(0, 2));
        }       
        if(evt.getKeyCode() == 8 && campoIPD.getText().replace(" ", "").equals("")) campoIPC.requestFocus(rootPaneCheckingEnabled);
    }//GEN-LAST:event_campoIPDKeyReleased

    private void campoIPBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIPBKeyReleased
        campoIPB.setText(campoIPB.getText().replaceAll("[^0-9]", ""));
        if(evt.getKeyCode() == 46 || evt.getKeyCode() == 0 && !campoIPB.getText().replace(" ", "").equals("")) campoIPC.requestFocus(rootPaneCheckingEnabled);
        if(isInteger(campoIPB.getText()) == false){
            if(!campoIPB.getText().replace(" ", "").equals(""))campoIPB.setText(campoIPB.getText().substring(0, campoIPB.getText().length() - 1));
        }   
            else if(!campoIPB.getText().replace(" ", "").equals(""))
        {
            if(campoIPB.getText().length() > 1 && campoIPB.getText().substring(0, 1).equals("0")) campoIPB.setText(campoIPB.getText().substring(0, 1));
            else if(Integer.parseInt(campoIPB.getText().replace(" ", "")) > 254) campoIPB.setText(campoIPB.getText().substring(0, 2));            
        }                
        if(evt.getKeyCode() == 8 && campoIPB.getText().replace(" ", "").equals("")) campoIPA.requestFocus(rootPaneCheckingEnabled);
        if(campoIPB.getText().replace(" ", "").length()==3) campoIPC.requestFocus(rootPaneCheckingEnabled);      
    }//GEN-LAST:event_campoIPBKeyReleased

    private void mensagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mensagemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mensagemActionPerformed

    private void mensagemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mensagemKeyReleased
        if(evt.getKeyCode()==10)
        {
            if(clienteSocket.isClosed())conecta(campoIPString, 3005);
            
            String mensagemString = mensagem.getText()+"\n";
            mensagem.setText("");
            mensagem.requestFocus();
            enviaMensagem(mensagemString);                      
            resposta.append(retornaMensagem());
        }
    }//GEN-LAST:event_mensagemKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Cliente().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField campoIPA;
    private javax.swing.JFormattedTextField campoIPB;
    private javax.swing.JFormattedTextField campoIPC;
    private javax.swing.JFormattedTextField campoIPD;
    private javax.swing.JButton conectar;
    private javax.swing.JLabel informacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField mensagem;
    private javax.swing.JLabel nomeIP;
    private javax.swing.JPanel painel;
    private javax.swing.JTextArea resposta;
    private javax.swing.JScrollPane scrooll;
    // End of variables declaration//GEN-END:variables
}
